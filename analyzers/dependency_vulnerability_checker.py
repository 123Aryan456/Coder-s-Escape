import os
import requests
import logging
from datetime import datetime, timedelta
from functools import lru_cache

class DependencyVulnerabilityChecker:
    """Checks for security vulnerabilities in dependencies using OSV database."""
    def __init__(self, project_dir, config):
        self.project_dir = project_dir
        self.sources = config.get("sources", ["OSV"])
        self.timeout = config.get("timeout", 10)
        self.logger = logging.getLogger(__name__)

    @lru_cache(maxsize=100)
    def _check_osv(self, package_name):
        vulns = []
        url = 'https://api.osv.dev/v1/query'
        payload = {
            "package": {
                "name": package_name,
                "ecosystem": "PyPI"
            }
        }
        try:
            response = requests.post(url, json=payload, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
            if 'vulns' in data:
                for vuln in data['vulns']:
                    vulns.append(f"{package_name}: {vuln['id']} - {vuln['summary']}")
        except requests.Timeout:
            self.logger.error(f"Timeout while checking {package_name}")
        except requests.RequestException as e:
            self.logger.error(f"Error checking {package_name}: {e}")
        return vulns

    def check_vulnerabilities(self):
        vulnerabilities = []
        req_paths = [os.path.join(self.project_dir, fname) 
                    for fname in ('requirements.txt', 'Pipfile')]
        
        for req_path in req_paths:
            if not os.path.exists(req_path):
                continue
                
            try:
                with open(req_path, 'r') as f:
                    for line in f:
                        package = line.strip().split('==')[0]
                        if not package or package.startswith('#'):
                            continue
                        vulns = self._check_osv(package)
                        if vulns:
                            vulnerabilities.extend(vulns)
            except IOError as e:
                self.logger.error(f"Error reading {req_path}: {e}")
                
        return vulnerabilities